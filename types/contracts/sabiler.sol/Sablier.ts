/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SablierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_streamID"
      | "addStreamID"
      | "getRemainingDepositedAmount"
      | "getSablierAmount"
      | "getStreamID"
      | "owner"
      | "renounceOwnership"
      | "sablierV2Lockup"
      | "transferOwnership"
      | "updateSablierV2Lockup"
      | "userInfo"
      | "userRemainingDepositedAmount"
      | "userStreamID"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "addedstreamId"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_streamID",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addStreamID",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingDepositedAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSablierAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStreamID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sablierV2Lockup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSablierV2Lockup",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userRemainingDepositedAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userStreamID",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "_streamID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStreamID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingDepositedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSablierAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStreamID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sablierV2Lockup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSablierV2Lockup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRemainingDepositedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStreamID",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace addedstreamIdEvent {
  export type InputTuple = [_StreamID: BigNumberish, user: AddressLike];
  export type OutputTuple = [_StreamID: bigint, user: string];
  export interface OutputObject {
    _StreamID: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Sablier extends BaseContract {
  connect(runner?: ContractRunner | null): Sablier;
  waitForDeployment(): Promise<this>;

  interface: SablierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _streamID: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  addStreamID: TypedContractMethod<
    [_streamID: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  getRemainingDepositedAmount: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  getSablierAmount: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getStreamID: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sablierV2Lockup: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSablierV2Lockup: TypedContractMethod<
    [_newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  userInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        streamID: bigint;
        withdrawnAmount: bigint;
        depositAmount: bigint;
        userRemainingDepositedAmount: bigint;
      }
    ],
    "view"
  >;

  userRemainingDepositedAmount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  userStreamID: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_streamID"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "addStreamID"
  ): TypedContractMethod<
    [_streamID: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRemainingDepositedAmount"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSablierAmount"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getStreamID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sablierV2Lockup"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSablierV2Lockup"
  ): TypedContractMethod<[_newAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        streamID: bigint;
        withdrawnAmount: bigint;
        depositAmount: bigint;
        userRemainingDepositedAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userRemainingDepositedAmount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userStreamID"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "addedstreamId"
  ): TypedContractEvent<
    addedstreamIdEvent.InputTuple,
    addedstreamIdEvent.OutputTuple,
    addedstreamIdEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "addedstreamId(uint256,address)": TypedContractEvent<
      addedstreamIdEvent.InputTuple,
      addedstreamIdEvent.OutputTuple,
      addedstreamIdEvent.OutputObject
    >;
    addedstreamId: TypedContractEvent<
      addedstreamIdEvent.InputTuple,
      addedstreamIdEvent.OutputTuple,
      addedstreamIdEvent.OutputObject
    >;
  };
}
