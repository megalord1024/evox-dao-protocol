/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ISablierV2LockupInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_FEE"
      | "admin"
      | "approve"
      | "balanceOf"
      | "burn"
      | "cancel"
      | "cancelMultiple"
      | "claimProtocolRevenues"
      | "comptroller"
      | "getApproved"
      | "getAsset"
      | "getDepositedAmount"
      | "getEndTime"
      | "getRecipient"
      | "getRefundedAmount"
      | "getSender"
      | "getStartTime"
      | "getWithdrawnAmount"
      | "isApprovedForAll"
      | "isCancelable"
      | "isCold"
      | "isDepleted"
      | "isStream"
      | "isTransferable"
      | "isWarm"
      | "name"
      | "nextStreamId"
      | "ownerOf"
      | "protocolRevenues"
      | "refundableAmountOf"
      | "renounce"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setComptroller"
      | "setNFTDescriptor"
      | "statusOf"
      | "streamedAmountOf"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferAdmin"
      | "transferFrom"
      | "wasCanceled"
      | "withdraw"
      | "withdrawMax"
      | "withdrawMaxAndTransfer"
      | "withdrawMultiple"
      | "withdrawableAmountOf"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "CancelLockupStream"
      | "ClaimProtocolRevenues"
      | "RenounceLockupStream"
      | "SetComptroller"
      | "SetNFTDescriptor"
      | "Transfer"
      | "TransferAdmin"
      | "WithdrawFromLockupStream"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMultiple",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimProtocolRevenues",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefundedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawnAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCancelable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDepleted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWarm",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextStreamId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolRevenues",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refundableAmountOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setComptroller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTDescriptor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "statusOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "streamedAmountOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wasCanceled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMax",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMaxAndTransfer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMultiple",
    values: [BigNumberish[], AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableAmountOf",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimProtocolRevenues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEndTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefundedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCancelable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDepleted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStream", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextStreamId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolRevenues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundableAmountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renounce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setComptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "statusOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "streamedAmountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wasCanceled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMaxAndTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableAmountOf",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelLockupStreamEvent {
  export type InputTuple = [
    streamId: BigNumberish,
    sender: AddressLike,
    recipient: AddressLike,
    asset: AddressLike,
    senderAmount: BigNumberish,
    recipientAmount: BigNumberish
  ];
  export type OutputTuple = [
    streamId: bigint,
    sender: string,
    recipient: string,
    asset: string,
    senderAmount: bigint,
    recipientAmount: bigint
  ];
  export interface OutputObject {
    streamId: bigint;
    sender: string;
    recipient: string;
    asset: string;
    senderAmount: bigint;
    recipientAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimProtocolRevenuesEvent {
  export type InputTuple = [
    admin: AddressLike,
    asset: AddressLike,
    protocolRevenues: BigNumberish
  ];
  export type OutputTuple = [
    admin: string,
    asset: string,
    protocolRevenues: bigint
  ];
  export interface OutputObject {
    admin: string;
    asset: string;
    protocolRevenues: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RenounceLockupStreamEvent {
  export type InputTuple = [streamId: BigNumberish];
  export type OutputTuple = [streamId: bigint];
  export interface OutputObject {
    streamId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetComptrollerEvent {
  export type InputTuple = [
    admin: AddressLike,
    oldComptroller: AddressLike,
    newComptroller: AddressLike
  ];
  export type OutputTuple = [
    admin: string,
    oldComptroller: string,
    newComptroller: string
  ];
  export interface OutputObject {
    admin: string;
    oldComptroller: string;
    newComptroller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetNFTDescriptorEvent {
  export type InputTuple = [
    admin: AddressLike,
    oldNFTDescriptor: AddressLike,
    newNFTDescriptor: AddressLike
  ];
  export type OutputTuple = [
    admin: string,
    oldNFTDescriptor: string,
    newNFTDescriptor: string
  ];
  export interface OutputObject {
    admin: string;
    oldNFTDescriptor: string;
    newNFTDescriptor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawFromLockupStreamEvent {
  export type InputTuple = [
    streamId: BigNumberish,
    to: AddressLike,
    asset: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    streamId: bigint,
    to: string,
    asset: string,
    amount: bigint
  ];
  export interface OutputObject {
    streamId: bigint;
    to: string;
    asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISablierV2Lockup extends BaseContract {
  connect(runner?: ContractRunner | null): ISablierV2Lockup;
  waitForDeployment(): Promise<this>;

  interface: ISablierV2LockupInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_FEE: TypedContractMethod<[], [bigint], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[streamId: BigNumberish], [void], "nonpayable">;

  cancel: TypedContractMethod<[streamId: BigNumberish], [void], "nonpayable">;

  cancelMultiple: TypedContractMethod<
    [streamIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claimProtocolRevenues: TypedContractMethod<
    [asset: AddressLike],
    [void],
    "nonpayable"
  >;

  comptroller: TypedContractMethod<[], [string], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getAsset: TypedContractMethod<[streamId: BigNumberish], [string], "view">;

  getDepositedAmount: TypedContractMethod<
    [streamId: BigNumberish],
    [bigint],
    "view"
  >;

  getEndTime: TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;

  getRecipient: TypedContractMethod<[streamId: BigNumberish], [string], "view">;

  getRefundedAmount: TypedContractMethod<
    [streamId: BigNumberish],
    [bigint],
    "view"
  >;

  getSender: TypedContractMethod<[streamId: BigNumberish], [string], "view">;

  getStartTime: TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;

  getWithdrawnAmount: TypedContractMethod<
    [streamId: BigNumberish],
    [bigint],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isCancelable: TypedContractMethod<
    [streamId: BigNumberish],
    [boolean],
    "view"
  >;

  isCold: TypedContractMethod<[streamId: BigNumberish], [boolean], "view">;

  isDepleted: TypedContractMethod<[streamId: BigNumberish], [boolean], "view">;

  isStream: TypedContractMethod<[streamId: BigNumberish], [boolean], "view">;

  isTransferable: TypedContractMethod<
    [streamId: BigNumberish],
    [boolean],
    "view"
  >;

  isWarm: TypedContractMethod<[streamId: BigNumberish], [boolean], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nextStreamId: TypedContractMethod<[], [bigint], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  protocolRevenues: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  refundableAmountOf: TypedContractMethod<
    [streamId: BigNumberish],
    [bigint],
    "view"
  >;

  renounce: TypedContractMethod<[streamId: BigNumberish], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setComptroller: TypedContractMethod<
    [newComptroller: AddressLike],
    [void],
    "nonpayable"
  >;

  setNFTDescriptor: TypedContractMethod<
    [newNFTDescriptor: AddressLike],
    [void],
    "nonpayable"
  >;

  statusOf: TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;

  streamedAmountOf: TypedContractMethod<
    [streamId: BigNumberish],
    [bigint],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  wasCanceled: TypedContractMethod<[streamId: BigNumberish], [boolean], "view">;

  withdraw: TypedContractMethod<
    [streamId: BigNumberish, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawMax: TypedContractMethod<
    [streamId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawMaxAndTransfer: TypedContractMethod<
    [streamId: BigNumberish, newRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawMultiple: TypedContractMethod<
    [streamIds: BigNumberish[], to: AddressLike, amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  withdrawableAmountOf: TypedContractMethod<
    [streamId: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[streamId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[streamId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelMultiple"
  ): TypedContractMethod<[streamIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimProtocolRevenues"
  ): TypedContractMethod<[asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "comptroller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAsset"
  ): TypedContractMethod<[streamId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDepositedAmount"
  ): TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEndTime"
  ): TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRecipient"
  ): TypedContractMethod<[streamId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getRefundedAmount"
  ): TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSender"
  ): TypedContractMethod<[streamId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getStartTime"
  ): TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWithdrawnAmount"
  ): TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCancelable"
  ): TypedContractMethod<[streamId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCold"
  ): TypedContractMethod<[streamId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDepleted"
  ): TypedContractMethod<[streamId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isStream"
  ): TypedContractMethod<[streamId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTransferable"
  ): TypedContractMethod<[streamId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWarm"
  ): TypedContractMethod<[streamId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextStreamId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "protocolRevenues"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundableAmountOf"
  ): TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounce"
  ): TypedContractMethod<[streamId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setComptroller"
  ): TypedContractMethod<[newComptroller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNFTDescriptor"
  ): TypedContractMethod<[newNFTDescriptor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "statusOf"
  ): TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "streamedAmountOf"
  ): TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wasCanceled"
  ): TypedContractMethod<[streamId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [streamId: BigNumberish, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawMax"
  ): TypedContractMethod<
    [streamId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawMaxAndTransfer"
  ): TypedContractMethod<
    [streamId: BigNumberish, newRecipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawMultiple"
  ): TypedContractMethod<
    [streamIds: BigNumberish[], to: AddressLike, amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawableAmountOf"
  ): TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "CancelLockupStream"
  ): TypedContractEvent<
    CancelLockupStreamEvent.InputTuple,
    CancelLockupStreamEvent.OutputTuple,
    CancelLockupStreamEvent.OutputObject
  >;
  getEvent(
    key: "ClaimProtocolRevenues"
  ): TypedContractEvent<
    ClaimProtocolRevenuesEvent.InputTuple,
    ClaimProtocolRevenuesEvent.OutputTuple,
    ClaimProtocolRevenuesEvent.OutputObject
  >;
  getEvent(
    key: "RenounceLockupStream"
  ): TypedContractEvent<
    RenounceLockupStreamEvent.InputTuple,
    RenounceLockupStreamEvent.OutputTuple,
    RenounceLockupStreamEvent.OutputObject
  >;
  getEvent(
    key: "SetComptroller"
  ): TypedContractEvent<
    SetComptrollerEvent.InputTuple,
    SetComptrollerEvent.OutputTuple,
    SetComptrollerEvent.OutputObject
  >;
  getEvent(
    key: "SetNFTDescriptor"
  ): TypedContractEvent<
    SetNFTDescriptorEvent.InputTuple,
    SetNFTDescriptorEvent.OutputTuple,
    SetNFTDescriptorEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferAdmin"
  ): TypedContractEvent<
    TransferAdminEvent.InputTuple,
    TransferAdminEvent.OutputTuple,
    TransferAdminEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawFromLockupStream"
  ): TypedContractEvent<
    WithdrawFromLockupStreamEvent.InputTuple,
    WithdrawFromLockupStreamEvent.OutputTuple,
    WithdrawFromLockupStreamEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "CancelLockupStream(uint256,address,address,address,uint128,uint128)": TypedContractEvent<
      CancelLockupStreamEvent.InputTuple,
      CancelLockupStreamEvent.OutputTuple,
      CancelLockupStreamEvent.OutputObject
    >;
    CancelLockupStream: TypedContractEvent<
      CancelLockupStreamEvent.InputTuple,
      CancelLockupStreamEvent.OutputTuple,
      CancelLockupStreamEvent.OutputObject
    >;

    "ClaimProtocolRevenues(address,address,uint128)": TypedContractEvent<
      ClaimProtocolRevenuesEvent.InputTuple,
      ClaimProtocolRevenuesEvent.OutputTuple,
      ClaimProtocolRevenuesEvent.OutputObject
    >;
    ClaimProtocolRevenues: TypedContractEvent<
      ClaimProtocolRevenuesEvent.InputTuple,
      ClaimProtocolRevenuesEvent.OutputTuple,
      ClaimProtocolRevenuesEvent.OutputObject
    >;

    "RenounceLockupStream(uint256)": TypedContractEvent<
      RenounceLockupStreamEvent.InputTuple,
      RenounceLockupStreamEvent.OutputTuple,
      RenounceLockupStreamEvent.OutputObject
    >;
    RenounceLockupStream: TypedContractEvent<
      RenounceLockupStreamEvent.InputTuple,
      RenounceLockupStreamEvent.OutputTuple,
      RenounceLockupStreamEvent.OutputObject
    >;

    "SetComptroller(address,address,address)": TypedContractEvent<
      SetComptrollerEvent.InputTuple,
      SetComptrollerEvent.OutputTuple,
      SetComptrollerEvent.OutputObject
    >;
    SetComptroller: TypedContractEvent<
      SetComptrollerEvent.InputTuple,
      SetComptrollerEvent.OutputTuple,
      SetComptrollerEvent.OutputObject
    >;

    "SetNFTDescriptor(address,address,address)": TypedContractEvent<
      SetNFTDescriptorEvent.InputTuple,
      SetNFTDescriptorEvent.OutputTuple,
      SetNFTDescriptorEvent.OutputObject
    >;
    SetNFTDescriptor: TypedContractEvent<
      SetNFTDescriptorEvent.InputTuple,
      SetNFTDescriptorEvent.OutputTuple,
      SetNFTDescriptorEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferAdmin(address,address)": TypedContractEvent<
      TransferAdminEvent.InputTuple,
      TransferAdminEvent.OutputTuple,
      TransferAdminEvent.OutputObject
    >;
    TransferAdmin: TypedContractEvent<
      TransferAdminEvent.InputTuple,
      TransferAdminEvent.OutputTuple,
      TransferAdminEvent.OutputObject
    >;

    "WithdrawFromLockupStream(uint256,address,address,uint128)": TypedContractEvent<
      WithdrawFromLockupStreamEvent.InputTuple,
      WithdrawFromLockupStreamEvent.OutputTuple,
      WithdrawFromLockupStreamEvent.OutputObject
    >;
    WithdrawFromLockupStream: TypedContractEvent<
      WithdrawFromLockupStreamEvent.InputTuple,
      WithdrawFromLockupStreamEvent.OutputTuple,
      WithdrawFromLockupStreamEvent.OutputObject
    >;
  };
}
